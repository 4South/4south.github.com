---
layout: post
title: "Wrapping HTML5 Canvas with Ember View"
date: 2013-02-12 23:02
comments: true 
categories: View 
author: "Steve Kane"
published: false
---
##{{ 'End Goal and Setup' | upcase }}
###**Core Concept    ! :)**
Ember views are excellent wrappers for encapsulating DOM elements and their associated JS behaviors.
Using this concept of a view, we want to define methods and the appropriate HTML attributes to render
an {{ 'html canvas' | upcase }} and draw into it.
###**What to Use    ? :/**
This app, and most like it on this blog, will be easiest to write in jsFiddle.  You of course may also
write them as code in a text editor and then execute them but I will not cover that basic setup in these
posts. 
###**How to Proceed    ? :/**
Attempt to run your code after each major section.  The tutorial is structured such that your app is never broken
after each major step.  
##Write Minimally Viable Ember Application (that does something)
```html
<script type="text/x-handlebars">
  Text to demonstrate App is functioning
</script>
```
```coffeescript
window.App = Em.Application.create()
```
###**Where's the Router    ? :/**<br />
Ember generates a default router for us.  We are not changing routes so no need to explicitly declare it ourselves.
###**Why Define The Template    ? :/**<br />
Primarily, we demonstrate our app's validity.  Secondarily, we are going to modify this to be more useful in the next section.

##Construct Canvas View, Modify application Template, Add CSS Border
```coffeescript
window.App = Em.Application.create()

App.Canvas = Em.View.extend
  tagName: "canvas"
  attributeBindings: ['height', 'width']
  height: "500px"
  width: "600ox"
  color1: "blue"
  color2: "orange"
```
{% codeblock lang:html %}
<script type="text/x-handlebars">
  Text to demonstrate App is functioning
  {{ "{{ view 'App.Canvas' " }}}}
</script>
{% endcodeblock %}
```css
canvas {
  border: 5px solid black;
}
```
###**What is the Meaning of "view App.Canvas"    ? :/**
This will create a new instance of the view "App.Canvas" and render it into the application template.  The view has the same context as the current template 
(in this case Ember has automagically generated applicationController).
###**And the Attributes    ? :|**
AttributeBindings is an array of strings that references other attributes on the view.  It creates HTML attributes by those attribute names with the values stored
in each attribute.  If the attributes change on the view, they will also change in the HTML.  We are using "height" and "width" in this manner and the resulting
output is shown below.
```html
<canvas height="500px" width="400px"></canvas>
```
Attributes "color1" and "color2" are going to be used by our application to determine what colors to paint our canvas.  More on that to come...
##Hook Into DOM Insertion and Design a Fill Method
```coffeescript
window.App = Em.Application.create()

App.Canvas = Em.View.extend
  tagName: "canvas"
  attributeBindings: ['height', 'width']
  height: "500px"
  width: "600ox"
  color1: "blue"
  color2: "orange"
  
  #this method is fired when this view's element is inserted in the DOM
  didInsertElement: () ->
    @_super()
    @fill()

  fill: () ->
    #local variables for clarity
    halfHeight = @get('height') / 2
    width = @get "width"
    c1 = @get "color1"
    c2 = @get "color2"
    
    #draw canvas parameters and methods (basic canvas api)
    ctx = el.getContext "2d"
    ctx.fillStyle = c1
    ctx.fillRect 0, 0, width, halfHeight
    ctx.fillStyle = c2
    ctx.fillRect 0, halfHeight, width, halfHeight
```
###**What Are These New Mehods   ? (╯°□°)╯︵ ┻━┻**

###**Use This Approach to Draw Using Any Canvas API You Prefer    ! ┬─┬ ノ(゜-゜ノ)**


